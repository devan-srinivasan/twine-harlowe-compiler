// Generated from twine_harlowe.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,150,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
1,29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,3,3,0,9,10,12,13,32,
32,2,0,65,90,97,122,1,0,48,57,149,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,
63,1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,73,1,0,
0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,79,1,0,0,0,19,81,1,0,0,0,21,85,1,0,0,
0,23,94,1,0,0,0,25,100,1,0,0,0,27,105,1,0,0,0,29,108,1,0,0,0,31,111,1,0,
0,0,33,115,1,0,0,0,35,118,1,0,0,0,37,120,1,0,0,0,39,122,1,0,0,0,41,125,1,
0,0,0,43,128,1,0,0,0,45,131,1,0,0,0,47,133,1,0,0,0,49,135,1,0,0,0,51,137,
1,0,0,0,53,139,1,0,0,0,55,142,1,0,0,0,57,144,1,0,0,0,59,146,1,0,0,0,61,148,
1,0,0,0,63,64,5,91,0,0,64,2,1,0,0,0,65,66,5,93,0,0,66,4,1,0,0,0,67,68,5,
40,0,0,68,6,1,0,0,0,69,70,5,41,0,0,70,8,1,0,0,0,71,72,5,34,0,0,72,10,1,0,
0,0,73,74,5,95,0,0,74,12,1,0,0,0,75,76,5,36,0,0,76,14,1,0,0,0,77,78,5,46,
0,0,78,16,1,0,0,0,79,80,5,44,0,0,80,18,1,0,0,0,81,82,5,105,0,0,82,83,5,102,
0,0,83,84,5,58,0,0,84,20,1,0,0,0,85,86,5,101,0,0,86,87,5,108,0,0,87,88,5,
115,0,0,88,89,5,101,0,0,89,90,5,45,0,0,90,91,5,105,0,0,91,92,5,102,0,0,92,
93,5,58,0,0,93,22,1,0,0,0,94,95,5,101,0,0,95,96,5,108,0,0,96,97,5,115,0,
0,97,98,5,101,0,0,98,99,5,58,0,0,99,24,1,0,0,0,100,101,5,115,0,0,101,102,
5,101,0,0,102,103,5,116,0,0,103,104,5,58,0,0,104,26,1,0,0,0,105,106,5,116,
0,0,106,107,5,111,0,0,107,28,1,0,0,0,108,109,5,97,0,0,109,110,5,58,0,0,110,
30,1,0,0,0,111,112,5,97,0,0,112,113,5,110,0,0,113,114,5,100,0,0,114,32,1,
0,0,0,115,116,5,111,0,0,116,117,5,114,0,0,117,34,1,0,0,0,118,119,5,62,0,
0,119,36,1,0,0,0,120,121,5,60,0,0,121,38,1,0,0,0,122,123,5,62,0,0,123,124,
5,61,0,0,124,40,1,0,0,0,125,126,5,60,0,0,126,127,5,61,0,0,127,42,1,0,0,0,
128,129,5,105,0,0,129,130,5,115,0,0,130,44,1,0,0,0,131,132,5,43,0,0,132,
46,1,0,0,0,133,134,5,45,0,0,134,48,1,0,0,0,135,136,5,42,0,0,136,50,1,0,0,
0,137,138,5,47,0,0,138,52,1,0,0,0,139,140,5,45,0,0,140,141,5,62,0,0,141,
54,1,0,0,0,142,143,7,0,0,0,143,56,1,0,0,0,144,145,7,1,0,0,145,58,1,0,0,0,
146,147,7,2,0,0,147,60,1,0,0,0,148,149,9,0,0,0,149,62,1,0,0,0,1,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class twine_harloweLexer extends antlr4.Lexer {

    static grammarFileName = "twine_harlowe.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'['", "']'", "'('", "')'", "'\"'", "'_'", 
                         "'$'", "'.'", "','", "'if:'", "'else-if:'", "'else:'", 
                         "'set:'", "'to'", "'a:'", "'and'", "'or'", "'>'", 
                         "'<'", "'>='", "'<='", "'is'", "'+'", "'-'", "'*'", 
                         "'/'", "'->'" ];
	static symbolicNames = [ null, "LBRACK", "RBRACK", "LPAR", "RPAR", "QUOTE", 
                          "UNDERSCORE", "DS", "DOT", "COMMA", "IF", "ELSEIF", 
                          "ELSE", "SET", "TO", "ARR_START", "AND", "OR", 
                          "GT", "LT", "GE", "LE", "IS", "PLUS", "MINUS", 
                          "ASTERIK", "FSLASH", "ARROW", "WS", "ALPHA", "DIGIT", 
                          "ALL_ELSE" ];
	static ruleNames = [ "LBRACK", "RBRACK", "LPAR", "RPAR", "QUOTE", "UNDERSCORE", 
                      "DS", "DOT", "COMMA", "IF", "ELSEIF", "ELSE", "SET", 
                      "TO", "ARR_START", "AND", "OR", "GT", "LT", "GE", 
                      "LE", "IS", "PLUS", "MINUS", "ASTERIK", "FSLASH", 
                      "ARROW", "WS", "ALPHA", "DIGIT", "ALL_ELSE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

twine_harloweLexer.EOF = antlr4.Token.EOF;
twine_harloweLexer.LBRACK = 1;
twine_harloweLexer.RBRACK = 2;
twine_harloweLexer.LPAR = 3;
twine_harloweLexer.RPAR = 4;
twine_harloweLexer.QUOTE = 5;
twine_harloweLexer.UNDERSCORE = 6;
twine_harloweLexer.DS = 7;
twine_harloweLexer.DOT = 8;
twine_harloweLexer.COMMA = 9;
twine_harloweLexer.IF = 10;
twine_harloweLexer.ELSEIF = 11;
twine_harloweLexer.ELSE = 12;
twine_harloweLexer.SET = 13;
twine_harloweLexer.TO = 14;
twine_harloweLexer.ARR_START = 15;
twine_harloweLexer.AND = 16;
twine_harloweLexer.OR = 17;
twine_harloweLexer.GT = 18;
twine_harloweLexer.LT = 19;
twine_harloweLexer.GE = 20;
twine_harloweLexer.LE = 21;
twine_harloweLexer.IS = 22;
twine_harloweLexer.PLUS = 23;
twine_harloweLexer.MINUS = 24;
twine_harloweLexer.ASTERIK = 25;
twine_harloweLexer.FSLASH = 26;
twine_harloweLexer.ARROW = 27;
twine_harloweLexer.WS = 28;
twine_harloweLexer.ALPHA = 29;
twine_harloweLexer.DIGIT = 30;
twine_harloweLexer.ALL_ELSE = 31;



